[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "alpacasay"
description = "A fun CLI tool that displays messages with ASCII alpacas - like cowsay but with alpacas!"
readme = "README.md"
requires-python = ">=3.11"
version = "0.1.0"
authors = [
    { name = "mazzma", email = "say@alpacas.net" }
]
license = { text = "MIT" }
keywords = ["cli", "ascii", "alpaca", "cowsay", "fun"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Utilities",
    "Topic :: Games/Entertainment",
]
dependencies = [
    "typer>=0.12.0",
    "colorama>=0.4.0",
]

[dependency-groups]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.9.0",
    "pyright>=1.1.402",
    "pre-commit>=3.0.0",
]

[project.scripts]
alpacasay = "alpacasay.cli:app"

[project.urls]
Homepage = "https://github.com/mazzma12/alpacasay"
Repository = "https://github.com/mazzma12/alpacasay"
Issues = "https://github.com/mazzma12/alpacasay/issues"
Documentation = "https://mazzma12.github.io/alpacasay"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v --cov=alpacasay --cov-report=term-missing --cov-report=xml"

[tool.pyright]
exclude = [".venv", "build", "dist"]
venvPath = "."
venv = ".venv"
typeCheckingMode = "basic"

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "C90", # mccabe
]
ignore = [
    "E501", # line too long, handled by formatter
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
known-first-party = ["alpacasay"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
